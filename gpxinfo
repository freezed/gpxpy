#!/usr/bin/env python

"""
Command line utility to extract basic statistics from gpx file(s)
"""

import pdb

import sys as mod_sys
import logging as mod_logging
import math as mod_math
import argparse as mod_argparse
import json

import gpxpy as mod_gpxpy
import gpxpy.gpx as mod_gpx

from typing import *

KM_TO_MILES = 0.621371
M_TO_FEET = 3.28084


def compute_gpx_summary(gpx_part: Union[mod_gpx.GPX, mod_gpx.GPXTrack, mod_gpx.GPXTrackSegment]) -> dict:
    """
    Compute GPX data in a dict()
    gpx_part may be a track or segment.
    """
    gpx_summary = {
        "length_2d": 0,
        "length_3d": gpx_part.length_3d(),
        "moving_data": gpx_part.get_moving_data(),
        "points_no": len(list(gpx_part.walk(only_points=True))),
        "points": len(list(gpx_part.walk())),
        "uphill": gpx_part.get_uphill_downhill()[0],
        "downhill": gpx_part.get_uphill_downhill()[1],
        "start_time": gpx_part.get_time_bounds()[0],
        "end_time": gpx_part.get_time_bounds()[1],
        "distances": 0,
    }

    if gpx_summary["points_no"] > 0:
        distances: List[float] = []
        previous_point = None
        for point in gpx_part.walk(only_points=True):
            if previous_point:
                distance = point.distance_2d(previous_point)
                distances.append(distance)
            previous_point = point

        gpx_summary.update(distances=format_short_length(sum(distances) / gpx_summary["points"]))

    if gpx_part.length_2d():
        gpx_summary["length_2d"] = gpx_part.length_2d()

    return gpx_summary


def format_time(time_s: Optional[float]="") -> str:
    """
    Time formatter

    No time given:
    >>> format_time()
    'n/a'

    Format "HH:MM:SS"
    >>> format_time(4242.42)
    '01:10:42'

    Format "SS"
    >>> args.seconds = True
    >>> format_time(4242.42)
    '4242'
    """

    if not time_s:
        return 'n/a'
    elif args.seconds:
        return str(int(time_s))
    else:
        minutes = mod_math.floor(time_s / 60.)
        hours = mod_math.floor(minutes / 60.)
        return '%s:%s:%s' % (str(int(hours)).zfill(2), str(int(minutes % 60)).zfill(2), str(int(time_s % 60)).zfill(2))


def format_long_length(length: float) -> str:
    """
    Long length formatter
    >>> format_long_length(4242.42)
    '4.242km'

    In miles
    >>> args.miles = True
    >>> format_long_length(4242.42)
    '2.636miles'
    >>> args.miles = False
    """
    if args.miles:
        return '{:.3f}miles'.format(length / 1000. * KM_TO_MILES)
    else:
        return '{:.3f}km'.format(length / 1000.)


def format_short_length(length: float) -> str:
    """
    Short length formatter
    >>> format_short_length(4242.42)
    '4242.42m'

    In miles
    >>> args.miles = True
    >>> format_short_length(4242.42)
    '13918.70ft'
    >>> args.miles = False
    """
    if args.miles:
        return '{:.2f}ft'.format(length * M_TO_FEET)
    else:
        return '{:.2f}m'.format(length)


def format_speed(speed: float) -> str:
    """
    Speed formatter
    >>> format_speed(4242.42)
    '4242.42m/s = 15272.71km/h'

    In miles
    >>> args.miles = True
    >>> format_speed(4242.42)
    '9490.02mph'
    >>> args.miles = False
    """
    if not speed:
        speed = 0
    if args.miles:
        return '{:.2f}mph'.format(speed * KM_TO_MILES * 3600. / 1000.)
    else:
        return '{:.2f}m/s = {:.2f}km/h'.format(speed, speed * 3600. / 1000.)


def print_gpx_part_info(gpx_summary: dict, indentation: str='    ') -> None:
    """
    Print GPX info summary in console
    gpx_part may be a track or segment.

    >>> gpx = mod_gpxpy.parse(open("test_files/cerknicko-jezero.gpx"))
    >>> print_gpx_part_info(gpx) # doctest: +ELLIPSIS
        Length 2D: 4.580km
    ...
        Avg distance between points: 46.21m
    <BLANKLINE>
    """
    print('%sLength 2D: %s' % (indentation, format_long_length(gpx_summary["length_2d"])))
    print('%sLength 3D: %s' % (indentation, format_long_length(gpx_summary["length_3d"])))

    if gpx_summary["moving_data"]:
        print('%sMoving time: %s' % (indentation, format_time(gpx_summary["moving_data"].moving_time)))
        print('%sStopped time: %s' % (indentation, format_time(gpx_summary["moving_data"].stopped_time)))
        #print('%sStopped distance: %s' % (indentation, format_short_length(stopped_distance)))
        print('%sMax speed: %s' % (indentation, format_speed(gpx_summary["moving_data"].max_speed)))
        print('%sAvg speed: %s' % (indentation, format_speed(gpx_summary["moving_data"].moving_distance / gpx_summary["moving_data"].moving_time) if gpx_summary["moving_data"].moving_time > 0 else "?"))

    print('%sTotal uphill: %s' % (indentation, format_short_length(gpx_summary["uphill"])))
    print('%sTotal downhill: %s' % (indentation, format_short_length(gpx_summary["downhill"])))
    print('%sStarted: %s' % (indentation, gpx_summary["start_time"]))
    print('%sEnded: %s' % (indentation, gpx_summary["end_time"]))
    print('%sPoints: %s' % (indentation, gpx_summary["points_no"]))

    if gpx_summary["distances"]:
        print('%sAvg distance between points: %s' % (indentation, gpx_summary["distances"]))

    print('')


def json_gpx_info(gpx: mod_gpx.GPX, gpx_file: str) -> None:
    response = list()

    for track_no, track in enumerate(gpx.tracks):
        for segment_no, segment in enumerate(track.segments):
            meta = {
                "file": gpx_file,
                "track_num": track_no,
                "segment_num": segment_no,
            }

            data = compute_gpx_summary(segment)
            data["start_time"] = data["start_time"].isoformat()
            data["end_time"] = data["end_time"].isoformat()

        response.append({"meta": meta, "data": data,})

    return json.dumps(response, indent=2, separators=(',', ':'))

def print_gpx_info(gpx: mod_gpx.GPX, gpx_file: str) -> None:
    """
    >>> gpx_file = "test_files/cerknicko-jezero.gpx"
    >>> gpx_parser = mod_gpxpy.parse(open(gpx_file))
    >>> print_gpx_info(gpx_parser, gpx_file) # doctest: +ELLIPSIS
    File: test_files/cerknicko-jezero.gpx
    ...
        Track #0, Segment #0
            Length 2D: 0.000km
    ...
        Track #7, Segment #0
    ...
            Avg distance between points: 16.52m
    ...
    """
    print('File: %s' % gpx_file)

    if gpx.name:
        print('  GPX name: %s' % gpx.name)
    if gpx.description:
        print('  GPX description: %s' % gpx.description)
    if gpx.author_name:
        print('  Author: %s' % gpx.author_name)
    if gpx.author_email:
        print('  Email: %s' % gpx.author_email)

    print_gpx_part_info(compute_gpx_summary(gpx))

    for track_no, track in enumerate(gpx.tracks):
        for segment_no, segment in enumerate(track.segments):
            print('    Track #%s, Segment #%s' % (track_no, segment_no))
            print_gpx_part_info(compute_gpx_summary(segment), indentation='        ')


def run(gpx_files: List[str]) -> None:
    """
    >>> gpx_files = ["test_files/cerknicko-jezero.gpx", "test_files/cerknicko-jezero-without-elevations.gpx"]
    >>> run(gpx_files) # doctest: +ELLIPSIS
    File: test_files/cerknicko-jezero.gpx
    ...
        Track #7, Segment #0
    ...
            Total uphill: 85.65m
            Total downhill: 34.22m
    ...
    File: test_files/cerknicko-jezero-without-elevations.gpx
    ...
        Track #7, Segment #0
    ...
            Total uphill: 0.00m
            Total downhill: 0.00m
    ...
    <BLANKLINE>
    """
    if not gpx_files:
        print('No GPX files given')
        mod_sys.exit(1)

    for gpx_file in gpx_files:
        try:
            gpx = mod_gpxpy.parse(open(gpx_file))
            print_gpx_info(gpx, gpx_file)
        except Exception as e:
            mod_logging.exception(e)
            print('Error processing %s' % gpx_file)
            mod_sys.exit(1)


def json_return(gpx_files: List[str]) -> None:
    if not gpx_files:
        print('No GPX files given')
        mod_sys.exit(1)

    response = list()

    for gpx_file in gpx_files:
        try:
            gpx = mod_gpxpy.parse(open(gpx_file))
            response.append(json_gpx_info(gpx, gpx_file))
        except Exception as e:
            mod_logging.exception(e)
            print('Error processing %s' % gpx_file)
            mod_sys.exit(1)

    return response

def make_parser() -> mod_argparse.ArgumentParser:
    parser = mod_argparse.ArgumentParser(usage='%(prog)s [-s] [-m] [-d] [file ...]',
        description='Command line utility to extract basic statistics from gpx file(s)')
    parser.add_argument('-j', '--json', action='store_true',
                        help='Returns summary as JSONÂ object')
    parser.add_argument('-s', '--seconds', action='store_true',
                        help='print times as N seconds, rather than HH:MM:SS')
    parser.add_argument('-m', '--miles', action='store_true',
                        help='print distances and speeds using miles and feet')
    parser.add_argument('-d', '--debug', action='store_true',
                        help='show detailed logging')
    return parser

if __name__ == '__main__':
    args, gpx_files = make_parser().parse_known_args()

    import doctest
    doctest.testmod()

    if args.debug:
        mod_logging.basicConfig(level=mod_logging.DEBUG,
                                format='%(asctime)s %(name)-12s %(levelname)-8s %(message)s')

    if args.json:
        for info in json_return(gpx_files):
            print(info)

    else:
        print_stdout(gpx_files)
